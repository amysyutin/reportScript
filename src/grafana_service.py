import os
import requests
import logging
import urllib.parse
import urllib3
from requests.adapters import HTTPAdapter, Retry
from requests.exceptions import Timeout, ConnectionError, HTTPError
from utils import to_utc_iso

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def create_session(retries: int = 3, backoff_factor: float = 0.5) -> requests.Session:
    """Return a requests session configured with retry logic."""
    session = requests.Session()
    retry = Retry(
        total=retries,
        backoff_factor=backoff_factor,
        status_forcelist=[500, 502, 503, 504],
        allowed_methods=["GET"],
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session

def build_grafana_url(params: dict) -> str:
    """Build full Grafana render URL matching curl_grafana.ini format exactly.

    Parameters expected in ``params``:
        base_url (str): base Grafana URL
        dashboard_uid (str): dashboard uid
        dashboard_name (str): dashboard name
        orgId (int/str)
        panelId (int/str)
        width (int/str)
        height (int/str)
        timeout (int/str): removed from query - not in curl examples
        timezone (str)
        from (str): start time in ISO8601 UTC
        to (str): end time in ISO8601 UTC
        vars (dict): optional variables

    Returns
    -------
    str
        Complete render URL for the panel.
    """

    render_url = f"{params['base_url']}/render/d-solo/{params['dashboard_uid']}/{params['dashboard_name']}"

    # –ü–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ –≤ curl_grafana.ini
    query_parts = []
    query_parts.append(f"orgId={params['orgId']}")
    query_parts.append(f"panelId={params['panelId']}")
    query_parts.append(f"width={params['width']}")
    query_parts.append(f"height={params['height']}")
    
    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—Ä–æ–≤, –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö - –≤ –∫–æ–Ω—Ü–µ
    if params['dashboard_uid'] in ['spring-boot-2x']:
        if params.get('panelId') in [95, 96]:  # CPU Usage –∏ Load Average
            query_parts.append(f"timezone={params['timezone']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏)
    from_time = params['from']
    to_time = params['to']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not from_time.endswith('.000Z') and not '.' in from_time.split('T')[1]:
        from_time = from_time.replace('Z', '.562Z')
    if not to_time.endswith('.000Z') and not '.' in to_time.split('T')[1]:
        to_time = to_time.replace('Z', '.381Z')
    
    query_parts.append(f"from={from_time}")
    query_parts.append(f"to={to_time}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Grafana (–±–µ–∑ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è $ —Å–∏–º–≤–æ–ª–æ–≤)
    vars_dict = params.get('vars', {})
    for name, value in vars_dict.items():
        # –ù–µ –∫–æ–¥–∏—Ä—É–µ–º $ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Grafana –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        encoded_value = str(value).replace(' ', '+')  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ +
        query_parts.append(f"{name}={encoded_value}")
    
    # –î–ª—è –º–µ—Ç—Ä–∏–∫ –ø–∞–º—è—Ç–∏ timezone –∏–¥–µ—Ç –≤ –∫–æ–Ω—Ü–µ
    if params['dashboard_uid'] in ['spring-boot-2x'] and params.get('panelId') not in [95, 96]:
        query_parts.append(f"timezone={params['timezone']}")
    
    # –î–ª—è Kubernetes –º–µ—Ç—Ä–∏–∫
    if params['dashboard_uid'] == 'kuber_api':
        query_parts.append(f"timezone={params['timezone']}")
    
    query_string = '&'.join(query_parts)
    return f"{render_url}?{query_string}"


def download_metric(session: requests.Session, url: str, headers: dict, output_file: str) -> bool:
    """Download a single Grafana panel image to ``output_file``.

    Returns ``True`` on success, ``False`` otherwise.
    """
    try:
        response = session.get(url, headers=headers, verify=False, timeout=120)
        if response.status_code != 200:
            logging.error(
                f"HTTP {response.status_code} while downloading {url}: {response.text}"
            )
            return False

        with open(output_file, "wb") as f:
            f.write(response.content)

        logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        return True

    except (Timeout, ConnectionError, HTTPError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
        return False

def download_grafana_metrics(cfg, metrics, main_folder_path, services):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Grafana –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
    
    –§—É–Ω–∫—Ü–∏—è:
    1. –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É metrics
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ = true) —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
    3. –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ –µ–≥–æ –ø–∞–ø–∫—É
    4. –ó–∞–º–µ–Ω—è–µ—Ç PLACEHOLDER –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    
    Args:
        cfg (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ config.yml
        metrics (list): –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –∏–∑ metrics_urls.yml  
        main_folder_path (str): –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        services (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ = true)
        
    Raises:
        Exception: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫
    """
    try:
        # ========== –ü–û–î–ì–û–¢–û–í–ö–ê –ü–ê–ü–û–ö –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==========
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        base_metrics_folder = os.path.join(main_folder_path, "metrics")
        os.makedirs(base_metrics_folder, exist_ok=True)
        logging.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫: {base_metrics_folder}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Grafana
        headers = {
            'Authorization': cfg['grafana']['api_key']  # Bearer token –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
        }
        
        # ========== –ü–ê–†–ê–ú–ï–¢–†–´ –í–†–ï–ú–ï–ù–ò ==========
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        timezone = cfg['mainConfig']['timezone']        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow)
        from_time = to_utc_iso(cfg['mainConfig']['from'], timezone)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC ISO
        to_time = to_utc_iso(cfg['mainConfig']['to'], timezone)      # –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC ISO
        
        logging.info(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {cfg['mainConfig']['from']} - {cfg['mainConfig']['to']} ({timezone})")
        logging.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ UTC: {from_time} - {to_time}")

        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        session = create_session()
        
        # ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–ï–†–í–ò–°–û–í ==========
        
        total_services = len(services)
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤: {', '.join(services)}")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for service_index, service in enumerate(services, 1):
            logging.info(f"\nüìä [{service_index}/{total_services}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å: {service}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            service_folder = os.path.join(base_metrics_folder, service)
            os.makedirs(service_folder, exist_ok=True)
            logging.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {service_folder}")

            # ========== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–¢–†–ò–ö ==========
            
            total_metrics = len(metrics)
            successful_downloads = 0
            failed_downloads = 0
            
            for metric_index, metric in enumerate(metrics, 1):
                metric_name = getattr(metric, 'name', f'metric_{metric_index}')  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º metric_name —Å—Ä–∞–∑—É
                try:
                    logging.info(f"  üìà [{metric_index}/{total_metrics}] –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É: {metric_name}")

                    # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    vars_dict = getattr(metric, 'vars', {}).copy()

                    # ========== –ó–ê–ú–ï–ù–ê PLACEHOLDER –ù–ê –†–ï–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ==========
                    
                    # –ó–∞–º–µ–Ω—è–µ–º PLACEHOLDER –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Grafana –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å var- –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø–æ—ç—Ç–æ–º—É —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
                    for full_var_name, value in vars_dict.items():
                        if isinstance(value, str) and "PLACEHOLDER" in value:
                            vars_dict[full_var_name] = value.replace("PLACEHOLDER", service)
                            logging.debug(f"    üîÑ –ó–∞–º–µ–Ω–∏–ª–∏ {full_var_name}: {vars_dict[full_var_name]}")

                    # ========== –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ó–ê–ü–†–û–°–ê ==========
                    
                    params = {
                        'base_url': cfg['grafana']['base_url'],           # URL Grafana —Å–µ—Ä–≤–µ—Ä–∞
                        'dashboard_uid': metric.dashboard_uid,         # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID dashboard'–∞
                        'dashboard_name': metric.dashboard_name,       # –ù–∞–∑–≤–∞–Ω–∏–µ dashboard'–∞
                        'orgId': metric.orgId,                         # ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                        'panelId': metric.panelId,                     # ID –ø–∞–Ω–µ–ª–∏
                        'width': metric.width,                         # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        'height': metric.height,                       # –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        'timeout': getattr(metric, 'timeout', vars_dict.get('timeout', 60)),  # –¢–∞–π–º–∞—É—Ç
                        'timezone': timezone,                             # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                        'from': from_time,                                # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC)
                        'to': to_time,                                    # –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (UTC)
                        'vars': vars_dict                                 # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ dashboard'–∞
                    }

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
                    render_url = build_grafana_url(params)
                    logging.info(f"    üåê –ü–æ–ª–Ω—ã–π URL: {render_url}")

                    # ========== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê ==========
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    file_name = f"{metric_name}.png"
                    output_file = os.path.join(service_folder, file_name)

                    # ========== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ú–ï–¢–†–ò–ö–ò ==========
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
                    if download_metric(session, render_url, headers, output_file):
                        successful_downloads += 1
                        logging.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {file_name}")
                    else:
                        failed_downloads += 1
                        logging.warning(f"    ‚ùå –û—à–∏–±–∫–∞: {file_name}")

                except Exception as e:
                    failed_downloads += 1
                    logging.error(f"    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {str(e)}")
                    continue
            
            # ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–£ ==========
            
            logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}:")
            logging.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
            logging.info(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_downloads}")
            logging.info(f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_downloads/(successful_downloads+failed_downloads)*100):.1f}%")
        
        # ========== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
        
        logging.info(f"\nüéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤!")
        logging.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {base_metrics_folder}")

    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ Grafana: {str(e)}")
        raise

import os
import requests
import logging
import urllib.parse
import urllib3
from typing import List, Tuple, Optional
from requests.adapters import HTTPAdapter, Retry
from requests.exceptions import Timeout, ConnectionError, HTTPError
from .utils import to_utc_iso

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º SSL

from .config import load_metrics_config
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def create_session(retries: int = 3, backoff_factor: float = 0.5) -> requests.Session:
    """Return a requests session configured with retry logic."""
    session = requests.Session()
    retry = Retry(
        total=retries,
        backoff_factor=backoff_factor,
        status_forcelist=[500, 502, 503, 504],
        allowed_methods=["GET"],
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session

def build_grafana_url(params: dict) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL —Ä–µ–Ω–¥–µ—Ä–∞ –ø–∞–Ω–µ–ª–∏ Grafana.

    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ ``params``:
        - base_url, dashboard_uid, dashboard_name, orgId, panelId, width, height, timezone, from, to
        - vars (dict, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–ª–∏ —Å–ø–∏—Å–∫–∞–º–∏. –ò–º–µ–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –≤–∏–¥—É 'var-*'
    """

    render_url = f"{params['base_url']}/render/d-solo/{params['dashboard_uid']}/{params['dashboard_name']}"

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    query: List[Tuple[str, str]] = []
    for key in ["orgId", "panelId", "width", "height", "timezone", "from", "to"]:
        value = params.get(key)
        if value is not None:
            query.append((key, str(value)))

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Grafana: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –≤–∏–¥—É var-*
    vars_dict = params.get("vars", {}) or {}
    for raw_name, raw_value in vars_dict.items():
        name = raw_name if raw_name.startswith("var-") else f"var-{raw_name}"
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π (doseq)
        if isinstance(raw_value, list):
            for item in raw_value:
                query.append((name, str(item)))
        else:
            query.append((name, str(raw_value)))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ c –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–ª—é—á–µ–π
    query_string = urllib.parse.urlencode(query, doseq=True)
    return f"{render_url}?{query_string}"


def _is_png_file(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PNG –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ–∞–π–ª–∞."""
    try:
        with open(path, "rb") as f:
            header = f.read(8)
        return header.startswith(b"\x89PNG")
    except Exception:
        return False


def download_metric(session: requests.Session, url: str, headers: dict, output_file: str) -> bool:
    """Download a single Grafana panel image to ``output_file``.

    Returns ``True`` on success, ``False`` otherwise.
    """
    try:
        req_headers = dict(headers or {})
        req_headers.setdefault("Accept", "image/png")
        response = session.get(url, headers=req_headers, verify=False, timeout=120)
        if response.status_code != 200:
            logging.error(
                f"HTTP {response.status_code} while downloading {url}: {response.text}"
            )
            return False

        content_type = response.headers.get("Content-Type", "").lower()
        content_length = int(response.headers.get("Content-Length", "0") or 0)

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ PNG ‚Äì –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if "image/png" not in content_type:
            snippet = response.text[:200] if hasattr(response, "text") else ""
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type '{content_type}' –¥–ª—è {url}. –§—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞: {snippet}")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(output_file, "wb") as f:
            f.write(response.content)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: —Ä–∞–∑–º–µ—Ä –∏ PNG-—Å–∏–≥–Ω–∞—Ç—É—Ä–∞
        if content_length and content_length < 8000:
            logging.warning(f"–í–æ–∑–º–æ–∂–Ω–∞ –ø—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (<8KB): {output_file} ({content_length} –±–∞–π—Ç)")
        if not _is_png_file(output_file):
            logging.error(f"–§–∞–π–ª {output_file} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º PNG")
            try:
                os.remove(output_file)
            except Exception:
                pass
            return False

        logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        return True

    except (Timeout, ConnectionError, HTTPError, FileNotFoundError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {e}")
        return False

def download_gatling_metrics(cfg, main_folder_path, session: Optional[requests.Session] = None):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ Gatling –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.
    
    Args:
        cfg (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ config.yml
        main_folder_path (str): –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    """
    try:
        if not cfg['services'].get('gatling_metrics_service', False):
            return
            
        logging.info("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Gatling –º–µ—Ç—Ä–∏–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ Gatling —Å–∫—Ä–∏–ø—Ç—ã
        gatling_scripts = cfg['gatling_grafana'].get('gatling_scripts', {})
        enabled_scripts = [script_name for script_name, enabled in gatling_scripts.items() if enabled]
        
        if not enabled_scripts:
            logging.info("‚ö†Ô∏è  –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö Gatling —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return
            
        logging.info(f"üìã –í–∫–ª—é—á–µ–Ω–Ω—ã–µ Gatling —Å–∫—Ä–∏–ø—Ç—ã: {', '.join(enabled_scripts)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Gatling –º–µ—Ç—Ä–∏–∫
        gatling_metrics_config = load_metrics_config(cfg['gatling_grafana']['gatling_metrics_config'])
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Gatling Grafana
        base_url = str(cfg['gatling_grafana'].get('base_url', '') or '')
        if (not base_url) or base_url.startswith('/'):
            fallback = str(cfg.get('grafana', {}).get('base_url', '') or '')
            if fallback:
                logging.warning("GATLING_GRAFANA_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é grafana.base_url –∫–∞–∫ fallback")
                base_url = fallback
            else:
                logging.error("GATLING_GRAFANA_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ .env")
                return

        api_key = str(cfg['gatling_grafana']['api_key'])
        if not api_key.lower().startswith('bearer '):
            api_key = f"Bearer {api_key}"
        gatling_headers = {
            'Authorization': api_key
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        timezone = cfg['mainConfig']['timezone']
        from_time = to_utc_iso(cfg['mainConfig']['from'], timezone)
        to_time = to_utc_iso(cfg['mainConfig']['to'], timezone)
        
        # –°–æ–∑–¥–∞–µ–º/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP —Å–µ—Å—Å–∏—é
        session = session or create_session()
        
        total_successful = 0
        total_failed = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∫–ª—é—á–µ–Ω–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
        for script_index, script_name in enumerate(enabled_scripts, 1):
            logging.info(f"\nüìù [{script_index}/{len(enabled_scripts)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç: {script_name}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            script_folder = os.path.join(main_folder_path, "metrics", "gatling_metrics", script_name)
            os.makedirs(script_folder, exist_ok=True)
            logging.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {script_folder}")
            
            successful_downloads = 0
            failed_downloads = 0
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            for metric_index, metric in enumerate(gatling_metrics_config, 1):
                metric_name = metric.get('name', f'metric_{metric_index}')
                logging.info(f"  üìà [{metric_index}/{len(gatling_metrics_config)}] –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É: {metric_name}")
                
                try:
                    # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    vars_dict = metric.get('vars', {}).copy()
                    
                    # –ó–∞–º–µ–Ω—è–µ–º PLACEHOLDER –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Grafana –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
                    for full_var_name, value in vars_dict.items():
                        if isinstance(value, str) and "PLACEHOLDER" in value:
                            vars_dict[full_var_name] = value.replace("PLACEHOLDER", script_name)
                            logging.debug(f"    üîÑ –ó–∞–º–µ–Ω–∏–ª–∏ {full_var_name}: {vars_dict[full_var_name]}")
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                    params = {
                        'base_url': base_url,
                        'dashboard_uid': metric['dashboard_uid'],
                        'dashboard_name': metric['dashboard_name'],
                        'orgId': metric['orgId'],
                        'panelId': metric['panelId'],
                        'width': metric['width'],
                        'height': metric['height'],
                        'timeout': vars_dict.get('timeout', 60),
                        'timezone': timezone,
                        'from': from_time,
                        'to': to_time,
                        'vars': vars_dict
                    }
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
                    render_url = build_grafana_url(params)
                    if not render_url.startswith('http'):
                        render_url = base_url.rstrip('/') + render_url
                    logging.debug(f"    üåê URL: {render_url}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    file_name = f"{metric_name}.png"
                    output_file = os.path.join(script_folder, file_name)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
                    if download_metric(session, render_url, gatling_headers, output_file):
                        successful_downloads += 1
                        logging.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_name}")
                    else:
                        failed_downloads += 1
                        logging.error(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {file_name}")
                        
                except Exception as e:
                    failed_downloads += 1
                    logging.error(f"    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {str(e)}")
                    continue
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫—Ä–∏–ø—Ç—É
            logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name}:")
            logging.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
            logging.info(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_downloads}")
            script_total = successful_downloads + failed_downloads
            if script_total > 0:
                logging.info(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_downloads/script_total*100):.1f}%")
                
            total_successful += successful_downloads
            total_failed += failed_downloads
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º Gatling –º–µ—Ç—Ä–∏–∫–∞–º
        logging.info(f"\nüéâ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Gatling –º–µ—Ç—Ä–∏–∫:")
        logging.info(f"  ‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {total_successful}")
        logging.info(f"  ‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_failed}")
        grand_total = total_successful + total_failed
        if grand_total > 0:
            logging.info(f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(total_successful/grand_total*100):.1f}%")
            
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Gatling –º–µ—Ç—Ä–∏–∫: {str(e)}")
        raise


def download_postgresql_metrics(cfg, main_folder_path, session: Optional[requests.Session] = None):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ PostgreSQL.

    Args:
        cfg (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ config.yml
        main_folder_path (str): –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    """
    try:
        if not cfg['services'].get('postgresql_metrics_service', False):
            return

        logging.info("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PostgreSQL –º–µ—Ç—Ä–∏–∫")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è PostgreSQL –º–µ—Ç—Ä–∏–∫
        all_metrics_config = load_metrics_config(cfg['postgresql_grafana']['metrics_config'])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PostgreSQL –º–µ—Ç—Ä–∏–∫–∏
        postgresql_metrics_config = [
            metric for metric in all_metrics_config 
            if metric.get('name', '').startswith('postgresql_')
        ]
        
        if not postgresql_metrics_config:
            logging.info("‚ö†Ô∏è  –ù–µ—Ç PostgreSQL –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π Grafana
        pg_base_url = str(cfg['postgresql_grafana'].get('base_url', '') or '')
        if (not pg_base_url) or pg_base_url.startswith('/'):
            fallback = str(cfg.get('grafana', {}).get('base_url', '') or '')
            if fallback:
                logging.warning("POSTGRESQL_GRAFANA_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é grafana.base_url –∫–∞–∫ fallback")
                pg_base_url = fallback
            else:
                logging.error("POSTGRESQL_GRAFANA_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ .env")
                return

        pg_api_key = str(cfg['postgresql_grafana']['api_key'])
        if not pg_api_key.lower().startswith('bearer '):
            pg_api_key = f"Bearer {pg_api_key}"
        headers = {
            'Authorization': pg_api_key
        }

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        timezone = cfg['mainConfig']['timezone']
        from_time = to_utc_iso(cfg['mainConfig']['from'], timezone)
        to_time = to_utc_iso(cfg['mainConfig']['to'], timezone)

        # –°–æ–∑–¥–∞–µ–º/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP —Å–µ—Å—Å–∏—é
        session = session or create_session()

        successful_downloads = 0
        failed_downloads = 0

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Grafana –±–µ—Ä—ë–º –∏–∑ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ (metrics_urls.yml)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–µ—Ç—Ä–∏–∫ PostgreSQL
        postgresql_folder = os.path.join(main_folder_path, "metrics", "postgresql_metrics")
        os.makedirs(postgresql_folder, exist_ok=True)
        logging.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ PostgreSQL: {postgresql_folder}")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ PostgreSQL –º–µ—Ç—Ä–∏–∫–∞–º
        for metric_index, metric in enumerate(postgresql_metrics_config, 1):
            metric_name = metric.get('name', f'metric_{metric_index}')
            logging.info(f"  üìà [{metric_index}/{len(postgresql_metrics_config)}] –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É: {metric_name}")

            try:
                # –ë–µ—Ä—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç—Ä–∏–∫–∏ (–∏ —É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª—é—á–∏ –≤—Ä–æ–¥–µ timeout)
                vars_dict = dict(metric.get('vars', {})) if isinstance(metric.get('vars', {}), dict) else {}
                if 'timeout' in vars_dict:
                    vars_dict.pop('timeout', None)

                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                params = {
                    'base_url': pg_base_url,
                    'dashboard_uid': metric['dashboard_uid'],
                    'dashboard_name': metric['dashboard_name'],
                    'orgId': metric['orgId'],
                    'panelId': metric['panelId'],
                    'width': metric['width'],
                    'height': metric['height'],
                    'timezone': timezone,
                    'from': from_time,
                    'to': to_time,
                    'vars': vars_dict
                }

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
                render_url = build_grafana_url(params)
                if not render_url.startswith('http'):
                    render_url = pg_base_url.rstrip('/') + render_url
                logging.debug(f"    üåê URL: {render_url}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = f"{metric_name}.png"
                output_file = os.path.join(postgresql_folder, file_name)

                # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
                if download_metric(session, render_url, headers, output_file):
                    successful_downloads += 1
                    logging.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_name}")
                else:
                    failed_downloads += 1
                    logging.error(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {file_name}")

            except Exception as e:
                failed_downloads += 1
                logging.error(f"    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {str(e)}")
                continue

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ PostgreSQL –º–µ—Ç—Ä–∏–∫–∞–º
        logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è PostgreSQL –º–µ—Ç—Ä–∏–∫:")
        logging.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
        logging.info(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_downloads}")
        total = successful_downloads + failed_downloads
        if total > 0:
            logging.info(f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_downloads/total*100):.1f}%")

    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PostgreSQL –º–µ—Ç—Ä–∏–∫: {str(e)}")
        raise

def download_grafana_metrics(cfg, metrics, main_folder_path, services):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Grafana –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
    
    –§—É–Ω–∫—Ü–∏—è:
    1. –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É metrics
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ = true) —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É
    3. –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ –µ–≥–æ –ø–∞–ø–∫—É
    4. –ó–∞–º–µ–Ω—è–µ—Ç PLACEHOLDER –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    5. –°–∫–∞—á–∏–≤–∞–µ—Ç Gatling –º–µ—Ç—Ä–∏–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    
    Args:
        cfg (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ config.yml
        metrics (list): –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –∏–∑ metrics_urls.yml  
        main_folder_path (str): –ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        services (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (–≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ = true)
        
    Raises:
        Exception: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫
    """
    try:
        # ========== –ü–û–î–ì–û–¢–û–í–ö–ê –ü–ê–ü–û–ö –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==========
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        base_metrics_folder = os.path.join(main_folder_path, "metrics")
        os.makedirs(base_metrics_folder, exist_ok=True)
        logging.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫: {base_metrics_folder}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π Grafana
        gr_base_url = str(cfg['grafana'].get('base_url', '') or '')
        if (not gr_base_url) or gr_base_url.startswith('/'):
            logging.error("GRAFANA_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –≤ .env")
            return

        gr_api_key = str(cfg['grafana']['api_key'])
        if not gr_api_key.lower().startswith('bearer '):
            gr_api_key = f"Bearer {gr_api_key}"
        headers = {
            'Authorization': gr_api_key  # Bearer token –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
        }
        
        # ========== –ü–ê–†–ê–ú–ï–¢–†–´ –í–†–ï–ú–ï–ù–ò ==========
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        timezone = cfg['mainConfig']['timezone']        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow)
        from_time = to_utc_iso(cfg['mainConfig']['from'], timezone)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC ISO
        to_time = to_utc_iso(cfg['mainConfig']['to'], timezone)      # –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC ISO
        
        logging.info(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {cfg['mainConfig']['from']} - {cfg['mainConfig']['to']} ({timezone})")
        logging.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ UTC: {from_time} - {to_time}")

        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        session = create_session()
        
        # ========== –°–ö–ê–ß–ò–í–ê–ù–ò–ï GATLING –ú–ï–¢–†–ò–ö ==========
        download_gatling_metrics(cfg, main_folder_path, session)
        
        # ========== –°–ö–ê–ß–ò–í–ê–ù–ò–ï POSTGRESQL –ú–ï–¢–†–ò–ö ==========
        download_postgresql_metrics(cfg, main_folder_path, session)
        
        # ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–ï–†–í–ò–°–û–í ==========
        
        total_services = len(services)
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤: {', '.join(services)}")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for service_index, service in enumerate(services, 1):
            logging.info(f"\nüìä [{service_index}/{total_services}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å: {service}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            service_folder = os.path.join(base_metrics_folder, service)
            os.makedirs(service_folder, exist_ok=True)
            logging.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {service_folder}")

            # ========== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–¢–†–ò–ö ==========
            
            total_metrics = len(metrics)
            successful_downloads = 0
            failed_downloads = 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º PostgreSQL –º–µ—Ç—Ä–∏–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            service_metrics = [metric for metric in metrics if not getattr(metric, 'name', '').startswith('postgresql_')]
            
            for metric_index, metric in enumerate(service_metrics, 1):
                metric_name = getattr(metric, 'name', f'metric_{metric_index}')  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º metric_name —Å—Ä–∞–∑—É
                try:
                    logging.info(f"  üìà [{metric_index}/{len(service_metrics)}] –°–∫–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É: {metric_name}")

                    # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    vars_dict = getattr(metric, 'vars', {}).copy()

                    # ========== –ó–ê–ú–ï–ù–ê PLACEHOLDER –ù–ê –†–ï–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ==========
                    
                    # –ó–∞–º–µ–Ω—è–µ–º PLACEHOLDER –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Grafana –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å var- –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø–æ—ç—Ç–æ–º—É —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
                    for full_var_name, value in vars_dict.items():
                        if isinstance(value, str) and "PLACEHOLDER" in value:
                            vars_dict[full_var_name] = value.replace("PLACEHOLDER", service)
                            logging.debug(f"    üîÑ –ó–∞–º–µ–Ω–∏–ª–∏ {full_var_name}: {vars_dict[full_var_name]}")

                    # ========== –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ó–ê–ü–†–û–°–ê ==========
                    
                    params = {
                        'base_url': gr_base_url,           # URL Grafana —Å–µ—Ä–≤–µ—Ä–∞
                        'dashboard_uid': metric.dashboard_uid,         # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID dashboard'–∞
                        'dashboard_name': metric.dashboard_name,       # –ù–∞–∑–≤–∞–Ω–∏–µ dashboard'–∞
                        'orgId': metric.orgId,                         # ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                        'panelId': metric.panelId,                     # ID –ø–∞–Ω–µ–ª–∏
                        'width': metric.width,                         # –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        'height': metric.height,                       # –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        'timeout': getattr(metric, 'timeout', vars_dict.get('timeout', 60)),  # –¢–∞–π–º–∞—É—Ç
                        'timezone': timezone,                             # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                        'from': from_time,                                # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC)
                        'to': to_time,                                    # –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (UTC)
                        'vars': vars_dict                                 # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ dashboard'–∞
                    }

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
                    render_url = build_grafana_url(params)
                    if not render_url.startswith('http'):
                        render_url = gr_base_url.rstrip('/') + render_url
                    logging.info(f"    üåê –ü–æ–ª–Ω—ã–π URL: {render_url}")

                    # ========== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê ==========
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    file_name = f"{metric_name}.png"
                    output_file = os.path.join(service_folder, file_name)

                    # ========== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ú–ï–¢–†–ò–ö–ò ==========
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
                    if download_metric(session, render_url, headers, output_file):
                        successful_downloads += 1
                        logging.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {file_name}")
                    else:
                        failed_downloads += 1
                        logging.warning(f"    ‚ùå –û—à–∏–±–∫–∞: {file_name}")

                except Exception as e:
                    failed_downloads += 1
                    logging.error(f"    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {str(e)}")
                    continue
            
            # ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–†–í–ò–°–£ ==========
            
            logging.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}:")
            logging.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
            logging.info(f"  ‚ùå –û—à–∏–±–æ–∫: {failed_downloads}")
            if successful_downloads + failed_downloads > 0:
                logging.info(f"  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_downloads/(successful_downloads+failed_downloads)*100):.1f}%")
        
        # ========== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
        
        logging.info(f"\nüéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö {total_services} —Å–µ—Ä–≤–∏—Å–æ–≤!")
        logging.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {base_metrics_folder}")

    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ Grafana: {str(e)}")
        raise

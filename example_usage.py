#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Grafana

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ª–µ–≥–∫–æ –∏–∑–º–µ–Ω—è—Ç—å:
1. üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (from/to)
2. üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (timezone)
3. üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
4. üìä –ù–∞–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ LANIT
"""

import yaml
import logging
from datetime import datetime, timedelta
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def update_config_time_range(config_file: str, hours_back: int = 2):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É config.yml
        hours_back (int): –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –Ω–∞—á–∏–Ω–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=hours_back)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        config['mainConfig']['from'] = start_time.strftime('%Y-%m-%d %H:%M:%S')
        config['mainConfig']['to'] = end_time.strftime('%Y-%m-%d %H:%M:%S')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
        logging.info(f"   üìÖ –û—Ç: {config['mainConfig']['from']}")
        logging.info(f"   üìÖ –î–æ: {config['mainConfig']['to']}")
        logging.info(f"   üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config['mainConfig']['timezone']}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

def update_active_services(config_file: str, services_to_enable: list):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Args:
        config_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É config.yml
        services_to_enable (list): –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–∏—Å–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
        system_services = ['ssh_service', 'grafana_service']
        all_services = config.get('services', {})
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for service_name in all_services:
            if service_name not in system_services:
                all_services[service_name] = False
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        for service_name in services_to_enable:
            if service_name in all_services and service_name not in system_services:
                all_services[service_name] = True
                logging.info(f"üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å–µ—Ä–≤–∏—Å: {service_name}")
            else:
                logging.warning(f"‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        active_services = [name for name, enabled in all_services.items() 
                          if enabled and name not in system_services]
        logging.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {', '.join(active_services) if active_services else '–Ω–µ—Ç'}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")

def show_available_metrics(metrics_file: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    
    Args:
        metrics_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É metrics_urls.yml
    """
    try:
        with open(metrics_file, 'r', encoding='utf-8') as f:
            metrics_config = yaml.safe_load(f)
        
        metrics = metrics_config.get('metrics', [])
        
        logging.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ({len(metrics)} —à—Ç—É–∫):")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            'SPRING BOOT –ú–ï–¢–†–ò–ö–ò': [],
            '–ü–ê–ú–Ø–¢–¨': [],
            '–ü–û–¢–û–ö–ò –ò –ö–õ–ê–°–°–´': [],
            'GARBAGE COLLECTION': [],
            'HTTP –ú–ï–¢–†–ò–ö–ò': [],
            'KUBERNETES –ú–ï–¢–†–ò–ö–ò': []
        }
        
        for metric in metrics:
            name = metric.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            panel_id = metric.get('panelId', 'N/A')
            dashboard = metric.get('dashboard_uid', 'N/A')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ dashboard'—É
            if 'cpu_usage' in name or 'load_average' in name:
                categories['SPRING BOOT –ú–ï–¢–†–ò–ö–ò'].append(f"  üìà {name} (panel: {panel_id})")
            elif any(mem_word in name for mem_word in ['eden', 'old_gen', 'survivor', 'metaspace', 'compressed']):
                categories['–ü–ê–ú–Ø–¢–¨'].append(f"  üß† {name} (panel: {panel_id})")
            elif any(thread_word in name for thread_word in ['threads', 'classes']):
                categories['–ü–û–¢–û–ö–ò –ò –ö–õ–ê–°–°–´'].append(f"  üîß {name} (panel: {panel_id})")
            elif 'gc_' in name:
                categories['GARBAGE COLLECTION'].append(f"  üóëÔ∏è  {name} (panel: {panel_id})")
            elif any(http_word in name for http_word in ['http', 'requests']):
                categories['HTTP –ú–ï–¢–†–ò–ö–ò'].append(f"  üåê {name} (panel: {panel_id})")
            elif 'pod' in name or 'kuber' in dashboard:
                categories['KUBERNETES –ú–ï–¢–†–ò–ö–ò'].append(f"  ‚ò∏Ô∏è  {name} (panel: {panel_id})")
            else:
                categories['SPRING BOOT –ú–ï–¢–†–ò–ö–ò'].append(f"  üìä {name} (panel: {panel_id})")
        
        # –í—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, items in categories.items():
            if items:
                logging.info(f"\nüè∑Ô∏è  {category}:")
                for item in items:
                    logging.info(item)
                    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏.
    """
    logging.info("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –º–µ—Ç—Ä–∏–∫ Grafana")
    logging.info("="*80)
    
    config_file = "config.yml"
    metrics_file = "metrics_urls.yml"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path(config_file).exists():
        logging.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        return
    
    if not Path(metrics_file).exists():
        logging.error(f"‚ùå –§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {metrics_file}")
        return
    
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    logging.info("\nüìã –®–∞–≥ 1: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
    show_available_metrics(metrics_file)
    
    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)
    logging.info("\n‚è∞ –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    update_config_time_range(config_file, hours_back=2)
    
    # 3. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    logging.info("\nüîß –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    services_to_activate = [
        "dh-documents-service",    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        "dh-files-service"         # –°–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–æ–≤
        # "dh-auth-service",       # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # "dh-notifications-service" # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]
    update_active_services(config_file, services_to_activate)
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
    logging.info("\nüéØ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞")
    logging.info("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç:")
    logging.info("")
    logging.info("  # –°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏ Grafana:")
    logging.info("  python -m src.main -grafana")
    logging.info("")
    logging.info("  # –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã Gatling –∏ –º–µ—Ç—Ä–∏–∫–∏ Grafana:")
    logging.info("  python -m src.main -gatling -grafana")
    logging.info("")
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logging.info("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    logging.info("")
    logging.info("  reports/")
    logging.info("  ‚îú‚îÄ‚îÄ gatling/          # –û—Ç—á–µ—Ç—ã Gatling (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω -gatling)")
    logging.info("  ‚îî‚îÄ‚îÄ metrics/          # –ú–µ—Ç—Ä–∏–∫–∏ Grafana")
    logging.info("      ‚îú‚îÄ‚îÄ dh-documents-service/  # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    logging.info("      ‚îÇ   ‚îú‚îÄ‚îÄ cpu_usage.png")
    logging.info("      ‚îÇ   ‚îú‚îÄ‚îÄ memory_allocate_promote.png")
    logging.info("      ‚îÇ   ‚îú‚îÄ‚îÄ gc_count.png")
    logging.info("      ‚îÇ   ‚îî‚îÄ‚îÄ ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)")
    logging.info("      ‚îî‚îÄ‚îÄ dh-files-service/      # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ñ–∞–π–ª–æ–≤")
    logging.info("          ‚îú‚îÄ‚îÄ cpu_usage.png")
    logging.info("          ‚îú‚îÄ‚îÄ requests_per_second.png")
    logging.info("          ‚îî‚îÄ‚îÄ ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)")
    
    logging.info("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É.")
    logging.info("="*80)

if __name__ == "__main__":
    main()
